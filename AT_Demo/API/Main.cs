/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘API.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir98 = null;
        public BindDirection bind_dir99 = null;
        public BindDirection bind_dir100 = null;
        public BindDirection bind_dir101 = null;
        public BindDirection bind_dir102 = null;
        public BindDirection bind_dir103 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity24 = null;
        public BindDirection bind_dir104 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity24_Policy = null;
        public BindDirection bind_dir105 = null;
        public BindDirection bind_dir106 = null;
        public BindDirection bind_dir107 = null;
        public BindDirection bind_dir108 = null;
        public BindDirection bind_dir109 = null;
        public BindDirection bind_dir110 = null;
        public BindDirection bind_dir111 = null;
        public BindDirection bind_dir112 = null;
        public BindDirection bind_dir113 = null;
        public BindDirection bind_dir114 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity20 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity20");
            _flow.DataFetchActivity17 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity17");
            _flow.DataFetchActivity14 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity14");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity16 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity16");
            _flow.DataExporterActivity19 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity19");
            _flow.DataExporterActivity22 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity22");
            _flow.DataExporterCloseActivity23 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity23");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity15 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity15");
            _flow.DataDisconnectActivity18 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity18");
            _flow.DataDisconnectActivity21 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity21");
            this.DataCursorActivity24 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity24");
            this.DataCursorActivity24_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence13 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence13");
            _flow.IfElse5 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse5Input>(_context,"IfElse5");
            _flow.IfElseBranch6 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch6");
            _flow.IfElseBranch7 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch7");
            _flow.StServiceCallActivity4 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity4");
            _flow.StServiceCallActivity8 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity8");
            _flow.DataFetchActivity20.Comment = @"";
            _flow.DataFetchActivity20.IconPath = @"";
            _flow.DataFetchActivity20.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity20.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity20_QueryParameters_Document = new XmlDocument();
            DataFetchActivity20_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity20Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>dd095721-0ff2-41cc-b000-4216f9005dba</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>data!Sheet1</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>False</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>data</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{data!Sheet1.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Sheet1$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity20_QueryParameters_Document.LoadXml(xmlDataFetchActivity20Params);
            _flow.DataFetchActivity20.QueryParameters = DataFetchActivity20_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("data!Sheet1", _flow.DataFetchActivity20);
            this.Activities.Add (_flow.DataFetchActivity20);
            _flow.DataFetchActivity17.Comment = @"";
            _flow.DataFetchActivity17.IconPath = @"";
            _flow.DataFetchActivity17.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity17.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity17_QueryParameters_Document = new XmlDocument();
            DataFetchActivity17_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity17Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>adbf6e6a-e9e0-40b2-a370-4692a817fa19</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>data!Sheet2</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>False</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>data</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{data!Sheet2.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Sheet2$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity17_QueryParameters_Document.LoadXml(xmlDataFetchActivity17Params);
            _flow.DataFetchActivity17.QueryParameters = DataFetchActivity17_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("data!Sheet2", _flow.DataFetchActivity17);
            this.Activities.Add (_flow.DataFetchActivity17);
            _flow.DataFetchActivity14.Comment = @"";
            _flow.DataFetchActivity14.IconPath = @"";
            _flow.DataFetchActivity14.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity14.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity14_QueryParameters_Document = new XmlDocument();
            DataFetchActivity14_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity14Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>5c01a405-6519-4a76-a45c-f7984d96ee47</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>data!Sheet3</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>False</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>data</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{data!Sheet3.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Sheet3$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity14_QueryParameters_Document.LoadXml(xmlDataFetchActivity14Params);
            _flow.DataFetchActivity14.QueryParameters = DataFetchActivity14_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("data!Sheet3", _flow.DataFetchActivity14);
            this.Activities.Add (_flow.DataFetchActivity14);
            XmlDocument StartActivity1_ExecutionInputParameters_Document = new XmlDocument();
            StartActivity1_ExecutionInputParameters_Document.PreserveWhitespace = true;
            StartActivity1_ExecutionInputParameters_Document.LoadXml(
@"<Arguments><vResult>PassedABC</vResult></Arguments>");
            _flow.StartActivity1.ExecutionInputParameters = StartActivity1_ExecutionInputParameters_Document;
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 4 iterations";
            _flow.Loop2.NumberOfIterations = (int)4;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity24);
            _flow.Loop2.Activities.Add (_flow.Sequence13);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity16.Comment = @"";
            _flow.DataExporterActivity16.IconPath = @"";
            VTDPropertyInfoBase pi195 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter98 = new VTDObjectGetter(pi195);
            VTDPropertyInfoBase pi196 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter98 = new VTDObjectSetter(pi196);
            binding_setter98 = new StringFormaterDecorator(binding_setter98,"{Step.DataFetchActivity14.OutTable}");
            bind_dir98 = new BindDirection(_flow.DataFetchActivity14,binding_getter98,binding_setter98,BindTargetType.ToInProperty);
            _flow.DataExporterActivity16.InDirections.Add(bind_dir98);
            this.Activities.Add (_flow.DataExporterActivity16);
            _flow.DataExporterActivity19.Comment = @"";
            _flow.DataExporterActivity19.IconPath = @"";
            VTDPropertyInfoBase pi197 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter99 = new VTDObjectGetter(pi197);
            VTDPropertyInfoBase pi198 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter99 = new VTDObjectSetter(pi198);
            binding_setter99 = new StringFormaterDecorator(binding_setter99,"{Step.DataFetchActivity17.OutTable}");
            bind_dir99 = new BindDirection(_flow.DataFetchActivity17,binding_getter99,binding_setter99,BindTargetType.ToInProperty);
            _flow.DataExporterActivity19.InDirections.Add(bind_dir99);
            this.Activities.Add (_flow.DataExporterActivity19);
            _flow.DataExporterActivity22.Comment = @"";
            _flow.DataExporterActivity22.IconPath = @"";
            VTDPropertyInfoBase pi199 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter100 = new VTDObjectGetter(pi199);
            VTDPropertyInfoBase pi200 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter100 = new VTDObjectSetter(pi200);
            binding_setter100 = new StringFormaterDecorator(binding_setter100,"{Step.DataFetchActivity20.OutTable}");
            bind_dir100 = new BindDirection(_flow.DataFetchActivity20,binding_getter100,binding_setter100,BindTargetType.ToInProperty);
            _flow.DataExporterActivity22.InDirections.Add(bind_dir100);
            this.Activities.Add (_flow.DataExporterActivity22);
            _flow.DataExporterCloseActivity23.Comment = @"";
            _flow.DataExporterCloseActivity23.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity23);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity15.Comment = @"";
            _flow.DataDisconnectActivity15.IconPath = @"";
            VTDPropertyInfoBase pi201 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter101 = new VTDObjectGetter(pi201);
            VTDPropertyInfoBase pi202 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter101 = new VTDObjectSetter(pi202);
            binding_setter101 = new StringFormaterDecorator(binding_setter101,"{Step.DataFetchActivity14.OutTable}");
            bind_dir101 = new BindDirection(_flow.DataFetchActivity14,binding_getter101,binding_setter101,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity15.InDirections.Add(bind_dir101);
            this.Activities.Add (_flow.DataDisconnectActivity15);
            _flow.DataDisconnectActivity18.Comment = @"";
            _flow.DataDisconnectActivity18.IconPath = @"";
            VTDPropertyInfoBase pi203 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter102 = new VTDObjectGetter(pi203);
            VTDPropertyInfoBase pi204 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter102 = new VTDObjectSetter(pi204);
            binding_setter102 = new StringFormaterDecorator(binding_setter102,"{Step.DataFetchActivity17.OutTable}");
            bind_dir102 = new BindDirection(_flow.DataFetchActivity17,binding_getter102,binding_setter102,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity18.InDirections.Add(bind_dir102);
            this.Activities.Add (_flow.DataDisconnectActivity18);
            _flow.DataDisconnectActivity21.Comment = @"";
            _flow.DataDisconnectActivity21.IconPath = @"";
            VTDPropertyInfoBase pi205 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter103 = new VTDObjectGetter(pi205);
            VTDPropertyInfoBase pi206 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter103 = new VTDObjectSetter(pi206);
            binding_setter103 = new StringFormaterDecorator(binding_setter103,"{Step.DataFetchActivity20.OutTable}");
            bind_dir103 = new BindDirection(_flow.DataFetchActivity20,binding_getter103,binding_setter103,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity21.InDirections.Add(bind_dir103);
            this.Activities.Add (_flow.DataDisconnectActivity21);
            this.DataCursorActivity24.Comment = @"";
            this.DataCursorActivity24.IconPath = @"";
            VTDPropertyInfoBase pi207 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter104 = new VTDObjectGetter(pi207);
            VTDPropertyInfoBase pi208 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter104 = new VTDObjectSetter(pi208);
            binding_setter104 = new StringFormaterDecorator(binding_setter104,"{Step.DataFetchActivity20.OutTable}");
            bind_dir104 = new BindDirection(_flow.DataFetchActivity20,binding_getter104,binding_setter104,BindTargetType.ToInProperty);
            this.DataCursorActivity24.InDirections.Add(bind_dir104);
            this.DataCursorActivity24_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity24_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity24_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity24_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity24_Policy.StartCondition.Value = "";
            this.DataCursorActivity24_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity24_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity24_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity24_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity24_Policy.EndCondition.Value = "";
            this.DataCursorActivity24_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity24_Policy.StepSize = 1;
            this.DataCursorActivity24_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity24.Policy = this.DataCursorActivity24_Policy;
            this.DataCursorActivity24.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity24.ResetCursor;
            _flow.Sequence13.Comment = @"";
            _flow.Sequence13.IconPath = @"";
            _flow.Sequence13.Name = @"Sequence13";
            _flow.Sequence13.Activities.Add (_flow.IfElse5);
            _flow.IfElse5.ConditionAsString = @"{DataSource.data!Sheet1.Testing Type} Equal Positive";
            _flow.IfElse5.Comment = @"";
            _flow.IfElse5.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse5.Name = @"Condition5";
            _flow.IfElse5.Activities.Add (_flow.IfElseBranch6);
            _flow.IfElse5.Activities.Add (_flow.IfElseBranch7);
            _flow.IfElseBranch6.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            		var prop00 = new VTDPropertyInfoBase("Testing Type");
            		var getter00 = new VTDObjectGetter(prop00);
            		System.String expr00 = (System.String)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(this.DataCursorActivity24.GetParam(getter00),typeof(System.String));
            		var result0 =expr00;
            		System.String result1 = (System.String)("Positive");
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch6.Comment = @"";
            _flow.IfElseBranch6.IconPath = @"";
            _flow.IfElseBranch6.Name = @"Yes";
            _flow.IfElseBranch6.Activities.Add (_flow.StServiceCallActivity4);
            _flow.IfElseBranch7.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch7.Comment = @"";
            _flow.IfElseBranch7.IconPath = @"";
            _flow.IfElseBranch7.Name = @"No";
            _flow.IfElseBranch7.Activities.Add (_flow.StServiceCallActivity8);
            XmlDocument StServiceCallActivity4_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity4_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity4_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>{DataSource.data!Sheet1.Class}</Class><CustomerName>{DataSource.data!Sheet1.CustomerName}</CustomerName><DepartureDate>{DataSource.data!Sheet1.DepartureDate}</DepartureDate><FlightNumber>{DataSource.data!Sheet1.FlightNumber}</FlightNumber><NumberOfTickets>{DataSource.data!Sheet1.NumberOfTickets}</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity4.InputEnvelope = StServiceCallActivity4_InputEnvelope_Document;
            _flow.StServiceCallActivity4.Comment = @"";
            _flow.StServiceCallActivity4.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity4.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:24240/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IHPFlights_Service/CreateFlightOrder";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity4.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity4.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity4.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity4.IsOneWay = false;
            _flow.StServiceCallActivity4.SendRequestToService=true;
            _flow.StServiceCallActivity4.FaultExpected=false;
            _flow.StServiceCallActivity4.IsAsync=false;
            _flow.StServiceCallActivity4.TargetNamespace=@"HP.SOAQ.SampleApp";
            _flow.StServiceCallActivity4.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi209 = new VTDPropertyInfoBase("NumberOfTickets");
            VTDBaseGetter binding_getter105 = new VTDObjectGetter(pi209);
            VTDPropertyInfoBase pi210 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter105 = new VTDXPathSetter(pi210,XmlTypeCode.Int);
            bind_dir105 = new BindDirection(this.DataCursorActivity24,binding_getter105,binding_setter105,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir105);
            VTDPropertyInfoBase pi211 = new VTDPropertyInfoBase("FlightNumber");
            VTDBaseGetter binding_getter106 = new VTDObjectGetter(pi211);
            VTDPropertyInfoBase pi212 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter106 = new VTDXPathSetter(pi212,XmlTypeCode.Int);
            bind_dir106 = new BindDirection(this.DataCursorActivity24,binding_getter106,binding_setter106,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir106);
            VTDPropertyInfoBase pi213 = new VTDPropertyInfoBase("DepartureDate");
            VTDBaseGetter binding_getter107 = new VTDObjectGetter(pi213);
            VTDPropertyInfoBase pi214 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter107 = new VTDXPathSetter(pi214,XmlTypeCode.DateTime);
            bind_dir107 = new BindDirection(this.DataCursorActivity24,binding_getter107,binding_setter107,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir107);
            VTDPropertyInfoBase pi215 = new VTDPropertyInfoBase("CustomerName");
            VTDBaseGetter binding_getter108 = new VTDObjectGetter(pi215);
            VTDPropertyInfoBase pi216 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter108 = new VTDXPathSetter(pi216,XmlTypeCode.String);
            binding_setter108 = new StringFormaterDecorator(binding_setter108,"{DataSource.data!Sheet1.CustomerName}");
            bind_dir108 = new BindDirection(this.DataCursorActivity24,binding_getter108,binding_setter108,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir108);
            VTDPropertyInfoBase pi217 = new VTDPropertyInfoBase("Class");
            VTDBaseGetter binding_getter109 = new VTDObjectGetter(pi217);
            VTDPropertyInfoBase pi218 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter109 = new VTDXPathSetter(pi218,XmlTypeCode.String);
            binding_setter109 = new StringFormaterDecorator(binding_setter109,"{DataSource.data!Sheet1.Class}");
            bind_dir109 = new BindDirection(this.DataCursorActivity24,binding_getter109,binding_setter109,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir109);
            XmlDocument StServiceCallActivity4_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity4_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity4_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity4.ExpectedOutputAttachments = StServiceCallActivity4_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity4_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity4_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity4_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity4.ExpectedFaultProperties = StServiceCallActivity4_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity4_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity4_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity4_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity4.ExpectedOutputProperties = StServiceCallActivity4_ExpectedOutputProperties_Document;
            set_StServiceCallActivity4_checkpoints(_flow.StServiceCallActivity4);
            XmlDocument StServiceCallActivity8_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity8_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity8_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>{DataSource.data!Sheet1.Class}</Class><CustomerName p1:nil=""true"">{DataSource.data!Sheet1.CustomerName}</CustomerName><DepartureDate>{DataSource.data!Sheet1.DepartureDate}</DepartureDate><FlightNumber>{DataSource.data!Sheet1.FlightNumber}</FlightNumber><NumberOfTickets>{DataSource.data!Sheet1.NumberOfTickets}</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity8.InputEnvelope = StServiceCallActivity8_InputEnvelope_Document;
            _flow.StServiceCallActivity8.Comment = @"";
            _flow.StServiceCallActivity8.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity8.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:24240/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IHPFlights_Service/CreateFlightOrder";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity8.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity8.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity8.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity8.IsOneWay = false;
            _flow.StServiceCallActivity8.SendRequestToService=true;
            _flow.StServiceCallActivity8.FaultExpected=true;
            _flow.StServiceCallActivity8.IsAsync=false;
            _flow.StServiceCallActivity8.TargetNamespace=@"HP.SOAQ.SampleApp";
            _flow.StServiceCallActivity8.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi219 = new VTDPropertyInfoBase("NumberOfTickets");
            VTDBaseGetter binding_getter110 = new VTDObjectGetter(pi219);
            VTDPropertyInfoBase pi220 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter110 = new VTDXPathSetter(pi220,XmlTypeCode.Int);
            bind_dir110 = new BindDirection(this.DataCursorActivity24,binding_getter110,binding_setter110,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir110);
            VTDPropertyInfoBase pi221 = new VTDPropertyInfoBase("FlightNumber");
            VTDBaseGetter binding_getter111 = new VTDObjectGetter(pi221);
            VTDPropertyInfoBase pi222 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter111 = new VTDXPathSetter(pi222,XmlTypeCode.Int);
            bind_dir111 = new BindDirection(this.DataCursorActivity24,binding_getter111,binding_setter111,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir111);
            VTDPropertyInfoBase pi223 = new VTDPropertyInfoBase("DepartureDate");
            VTDBaseGetter binding_getter112 = new VTDObjectGetter(pi223);
            VTDPropertyInfoBase pi224 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter112 = new VTDXPathSetter(pi224,XmlTypeCode.DateTime);
            bind_dir112 = new BindDirection(this.DataCursorActivity24,binding_getter112,binding_setter112,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir112);
            VTDPropertyInfoBase pi225 = new VTDPropertyInfoBase("CustomerName");
            VTDBaseGetter binding_getter113 = new VTDObjectGetter(pi225);
            VTDPropertyInfoBase pi226 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter113 = new VTDXPathSetter(pi226,XmlTypeCode.String);
            binding_setter113 = new StringFormaterDecorator(binding_setter113,"{DataSource.data!Sheet1.CustomerName}");
            bind_dir113 = new BindDirection(this.DataCursorActivity24,binding_getter113,binding_setter113,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir113);
            VTDPropertyInfoBase pi227 = new VTDPropertyInfoBase("Class");
            VTDBaseGetter binding_getter114 = new VTDObjectGetter(pi227);
            VTDPropertyInfoBase pi228 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter114 = new VTDXPathSetter(pi228,XmlTypeCode.String);
            binding_setter114 = new StringFormaterDecorator(binding_setter114,"{DataSource.data!Sheet1.Class}");
            bind_dir114 = new BindDirection(this.DataCursorActivity24,binding_getter114,binding_setter114,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity8.InDirections.Add(bind_dir114);
            XmlDocument StServiceCallActivity8_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity8_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity8_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity8.ExpectedOutputAttachments = StServiceCallActivity8_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity8_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity8_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity8_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode>s:Client</faultcode><faultstring>ERROR: A flight date must be specified. It should be at least 24 hours from now.</faultstring></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity8.ExpectedFaultProperties = StServiceCallActivity8_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity8_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity8_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity8_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity8.ExpectedOutputProperties = StServiceCallActivity8_ExpectedOutputProperties_Document;
            set_StServiceCallActivity8_checkpoints(_flow.StServiceCallActivity8);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    			
    		
    			
    		
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		CreateReportFiles();
            // Write all snapshots to disk
           this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    
    protected override void OnThreadStart()
    {
    
    }
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
    	
    	public static void InitJavaEnv(string classPath, string additionalVMargs)
    	{
    		JVMLoader.LoadJVM(classPath, additionalVMargs);
    	}
    	
    	
    		
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    